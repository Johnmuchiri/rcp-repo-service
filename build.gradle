plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}

group = 'redpharma-repository-api'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all*.exclude group:'org.springframework.boot', module:'spring-boot-starter-logging'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.4'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.0.0-rc.1'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.1.5'
	implementation 'com.github.loki4j:loki-logback-appender:1.4.2'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.1.4'
	implementation 'org.jboss.logging:jboss-logging:3.5.3.Final'
	implementation 'org.springframework:spring-aspects:3.2.4.RELEASE'
	implementation 'commons-validator:commons-validator:1.7'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.3'
	testImplementation 'junit:junit:4.13.2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [] )
		}))
	}
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['com.red.pharma.auth/**',
										'com.red.pharma.config/**',
										'com.red.pharma.filters/**',
										'com.red.pharma.dtos/**'] )
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.2
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

targetCompatibility = JavaVersion.VERSION_19